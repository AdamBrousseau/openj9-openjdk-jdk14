# ===========================================================================
# (c) Copyright IBM Corp. 2020, 2020 All Rights Reserved
# ===========================================================================
# This code is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 2 only, as
# published by the Free Software Foundation.
#
# IBM designates this particular file as subject to the "Classpath" exception
# as provided by IBM in the LICENSE file that accompanied this code.
#
# This code is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# version 2 for more details (a copy is included in the LICENSE file that
# accompanied this code).
#
# You should have received a copy of the GNU General Public License version
# 2 along with this work; if not, see <http://www.gnu.org/licenses/>.
# ===========================================================================

ifeq ($(origin LIB_DST_DIR),undefined)
include CopyCommon.gmk
endif

EXE_DST_DIR := $(call FindExecutableDirForModule, $(MODULE))

ifeq (false,$(COPY_DEBUG_SYMBOLS))
  openj9_copy_debuginfos :=
else

  ifeq (macosx,$(OPENJDK_TARGET_OS))
    DEBUGINFO_SRC_SUFFIX := .dSYM
  else ifeq (windows,$(OPENJDK_TARGET_OS))
    DEBUGINFO_SRC_SUFFIX := .pdb
  else
    DEBUGINFO_SRC_SUFFIX := .debuginfo
  endif

  ifeq (true,$(ZIP_EXTERNAL_DEBUG_SYMBOLS))
    DEBUGINFO_DST_SUFFIX := .diz
  else
    DEBUGINFO_DST_SUFFIX := $(DEBUGINFO_SRC_SUFFIX)
  endif

  # openj9_make_debuginfo_paths
  # ---------------------------
  # $1 - required suffix
  # $2 - input paths
  openj9_make_debuginfo_paths = \
	$(if $(filter .dSYM, $1), \
		$(addsuffix .dSYM, $2), \
		$(foreach path, $2, $(path:$(suffix $(path))=$1)))

  # openj9_copy_debuginfo_rule
  # --------------------------
  # $1 - source file path
  # $2 - target file path
  define openj9_copy_debuginfo_rule
    TARGETS += $2
    $2 : $1
    ifneq (,$(and $(filter %$(DEBUGINFO_SRC_SUFFIX),$1),$(filter %.diz,$2)))
		$(call MakeTargetDir)
		($(CD) $$(<D) && $(ZIPEXE) -Dqr $$@ $$(<F))
    else
		$$(call install-file)
    endif
  endef

  # openj9_copy_debuginfo_helper
  # ----------------------------
  # $1 - sequence of file paths
  openj9_copy_debuginfo_helper = \
	$(eval $(call openj9_copy_debuginfo_rule,$(word 1,$1),$(word 2,$1))) \
	$(if $(word 3,$1),$(call openj9_copy_debuginfo_helper,$(wordlist 2,$(words $1),$1)))

  # openj9_copy_debuginfo_paths*
  # ----------------------------
  # $1 - source suffix
  # $2 - sequence of file paths
  ifeq (macosx/.dSYM,$(OPENJDK_TARGET_OS)/$(DEBUGINFO_DST_SUFFIX))
    # When not zipping on MacOSX, there are multiple files to copy; openj9_copy_debuginfo_paths_list
    # names the functions that produce the sequence for each file.
    openj9_copy_debuginfo_paths_list = openj9_copy_debuginfo_paths_a openj9_copy_debuginfo_paths_b
    openj9_copy_debuginfo_paths_a = $(foreach path, $2, $(path).dSYM/Contents/Info.plist)
    openj9_copy_debuginfo_paths_b = $(foreach path, $2, $(path).dSYM/Contents/Resources/DWARF/$(notdir $(path)))
  else
    openj9_copy_debuginfo_paths_list = openj9_copy_debuginfo_paths
    openj9_copy_debuginfo_paths = \
		$(call openj9_make_debuginfo_paths,$(DEBUGINFO_SRC_SUFFIX),$(word 1,$2)) \
		$(call openj9_make_debuginfo_paths,$(DEBUGINFO_DST_SUFFIX),$(wordlist 2,$(words $2),$2))
  endif # macosx

  # openj9_copy_debuginfos
  # ----------------------
  # $1 - source suffix
  # $2 - sequence of file paths
  openj9_copy_debuginfos = \
	$(if $(wildcard $(call openj9_make_debuginfo_paths,$(DEBUGINFO_SRC_SUFFIX),$(word 1,$2))), \
		$(foreach paths, $(openj9_copy_debuginfo_paths_list), \
			$(call openj9_copy_debuginfo_helper, $(call $(paths),$1,$2))))

endif # COPY_DEBUG_SYMBOLS

define openj9_copy_only
	$(call install-file)
endef

define openj9_copy_and_sign
	$(openj9_copy_only)
	$(call CodesignFile,"$@")
endef

# openj9_copy_rule
# ----------------
# $1 - suffix of install action macro ('only' or 'and_sign')
# $2 - source file path
# $3 - target file path
define openj9_copy_rule
  TARGETS += $3
  $3 : $2
	$$(openj9_copy_$1)
endef

# openj9_copy_files
# -----------------
# $1 - suffix of install action macro ('only' or 'and_sign'; default is 'only')
# $2 - sequence of file paths
openj9_copy_files = \
	$(eval $(call openj9_copy_rule,$(if $1,$(strip $1),only),$(word 1,$2),$(word 2,$2))) \
	$(if $(word 3,$2),$(call openj9_copy_files,,$(wordlist 2,$(words $2),$2)))

# openj9_copy_files_and_debuginfos
# --------------------------------
# $1 - sequence of file paths
openj9_copy_files_and_debuginfos = \
	$(call openj9_copy_files,and_sign,$1) \
	$(call openj9_copy_debuginfos,$(suffix $(word 1,$1)),$1)

# openj9_copy_exes
# ----------------
# $1 = list of executable names without $(EXE_SUFFIX)
openj9_copy_exes = \
	$(foreach file, $1, \
		$(call openj9_copy_files_and_debuginfos, \
			$(addsuffix /$(file)$(EXE_SUFFIX), \
				$(OPENJ9_VM_BUILD_DIR) \
				$(EXE_DST_DIR))))

# openj9_copy_shlibs
# ------------------
# $1 = list of shared library names without $(LIBRARY_PREFIX) or $(SHARED_LIBRARY_SUFFIX)
openj9_copy_shlibs = \
	$(foreach name, $1, \
		$(call openj9_copy_files_and_debuginfos, \
			$(addsuffix /$(call SHARED_LIBRARY,$(name)), \
				$(OPENJ9_VM_BUILD_DIR) \
				$(LIB_DST_DIR)/$(OPENJ9_LIBS_SUBDIR))))
